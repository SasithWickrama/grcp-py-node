import grpc
from concurrent import futures
import socket
import time
import hashlib
import node_pb2
import node_pb2_grpc

# Define roles for nodes
ROLES = ["receiver", "hasher"]

class NodeService(node_pb2_grpc.NodeServiceServicer):
    def __init__(self, node_id, node_name, ip_address, initial_connected_nodes=None, initial_value_table=None):
        self.node_id = node_id
        self.node_name = node_name
        self.ip_address = ip_address
        self.connected_nodes = initial_connected_nodes if initial_connected_nodes is not None else {}
        self.value_table = initial_value_table if initial_value_table is not None else {}
        # Determine node role based on the number of connected nodes
        self.role = ROLES[len(self.connected_nodes) % 2]

    def JoinCluster(self, request, context):
        try:
            new_node_ip = request.ip_address
            self.connected_nodes[request.node_id] = (request.node_name, new_node_ip)
            # Update node role
            self.role = ROLES[len(self.connected_nodes) % 2]

            # Broadcast message to all connected nodes
            for existing_node_id, existing_node_info in self.connected_nodes.items():
                existing_node_ip = existing_node_info[1]
                with grpc.insecure_channel(existing_node_ip) as channel:
                    stub = node_pb2_grpc.NodeServiceStub(channel)
                    stub.NotifyNodeJoined(node_pb2.NotifyNodeJoinedRequest(node_id=request.node_id, node_name=request.node_name, ip_address=new_node_ip))

            print("[{}] Node {} ({}) joined the cluster.".format(self.node_name, request.node_id, request.node_name))
            print("[{}] Updated connected nodes: {}".format(self.node_name, self.connected_nodes))
            print("[{}] Updated value table: {}".format(self.node_name, self.value_table))

            return node_pb2.JoinClusterResponse()
        except Exception as e:
            print("Exception occurred in JoinCluster: {}".format(e))
            context.set_code(grpc.StatusCode.INTERNAL)
            context.set_details("Error occurred: {}".format(e))
            return node_pb2.JoinClusterResponse()

    def StoreData(self, request, context):
        try:
            if request.key is None:
                print("[{}] Error: Key is None.".format(self.node_name))
                return node_pb2.StoreDataResponse()

            if self.role == "receiver":
                # Store exact value according to assignment
                self.value_table[request.key] = request.value
            else:
                # Forward data to the appropriate receiver node for hasher nodes
                hash_key = self.compute_hash(request.key[:10])
                target_node_id = hash_key % len(self.connected_nodes)
                target_node_ip = self.get_connected_node_ip(target_node_id)
                if target_node_ip:
                    self.send_to_node(target_node_id, request, target_node_ip)
                    print("[{}] Data forwarded to node {}.".format(self.node_name, target_node_id))
                else:
                    print("[{}] Error: Unable to find IP address of node {}.".format(self.node_name, target_node_id))

            # Print request key and value if they are not None
            if request.key is not None and request.value is not None:
                print("[{}] Key: {}, Value: {}".format(self.node_name, request.key, request.value))

            return node_pb2.StoreDataResponse()
        except Exception as e:
            print("Exception occurred in StoreData: {}".format(e))
            context.set_code(grpc.StatusCode.INTERNAL)
            context.set_details("Error occurred: {}".format(e))
            return node_pb2.StoreDataResponse()

    def RetrieveData(self, request, context):
        try:
            if request.key in self.value_table:
                # Retrieve data from the value table if available
                return node_pb2.RetrieveDataResponse(value=self.value_table[request.key])
            else:
                return node_pb2.RetrieveDataResponse()
        except Exception as e:
            print("Exception occurred in RetrieveData: {}".format(e))
            context.set_code(grpc.StatusCode.INTERNAL)
            context.set_details("Error occurred: {}".format(e))
            return node_pb2.RetrieveDataResponse()

    def compute_hash(self, key):
        # Compute MD5 hash of the key
        hash_value = int(hashlib.md5(key.encode()).hexdigest(), 16)
        print("[{}] Hash value for key '{}' is {}.".format(self.node_name, key, hash_value))
        return hash_value                

    def send_to_node(self, node_id, request, target_node_ip):
        # Send data to the specified node
        with grpc.insecure_channel(target_node_ip) as channel:
            stub = node_pb2_grpc.NodeServiceStub(channel)
            stub.StoreData(request)

    def NotifyNodeJoined(self, request, context):
        try:
            print("[{}] Node {} ({}) joined the cluster.".format(self.node_name, request.node_id, request.node_name))
            # Create and return a valid response message
            response = node_pb2.NotifyNodeJoinedResponse()
            # Optionally, populate fields in the response message if needed
            return response
        except Exception as e:
            print("Exception occurred in NotifyNodeJoined: {}".format(e))

    def get_connected_node_ip(self, node_id):
        try:
            if node_id in self.connected_nodes:
                return self.connected_nodes[node_id][1]
            else:
                return None
        except Exception as e:
            print("Exception occurred in get_connected_node_ip: {}".format(e))
            return None

def start_server(node_id, node_name, ip_address):
    try:
        server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
        node_service = NodeService(node_id, node_name, ip_address)
        node_pb2_grpc.add_NodeServiceServicer_to_server(node_service, server)
        server.add_insecure_port('[::]:{}'.format(ip_address.split(":")[1]))
        server.start()
        print("Server started successfully.")
        try:
            while True:
                time.sleep(3600)  # Sleep for 1 hour
        except KeyboardInterrupt:
            server.stop(0)
            print("Server stopped.")
    except Exception as e:
        print("Exception occurred in start_server: {}".format(e))

if __name__ == '__main__':
    # Iterate through each node ID from 0 to 4
    for node_id in range(5):
        # Generate node name and IP address
        node_name = 'Node_{}'.format(node_id)
        ip_address = '{}:50051'.format(socket.gethostbyname(socket.gethostname()))
        print("[{}] Node IP address {}.".format(node_name, ip_address))
        # Start the server
        start_server(node_id, node_name, ip_address)
